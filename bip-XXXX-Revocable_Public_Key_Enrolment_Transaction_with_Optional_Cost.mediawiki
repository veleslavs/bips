<pre>
  BIP: XXXX
  Layer: Applications
  Title: Revocable Public Key Enrolment Transaction with Optional Cost
  Author: Велеслав <veleslav.bips@protonmail.com>, Jonas Schnelli <dev@jonasschnelli.ch>
  Comments-Summary: No comments yet.
  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-XXXX
  Status: Draft
  Type: Informational
  Created: 
  License: BSD-2-Clause
</pre>

== Introduction ==

=== Abstract ===

This document proposes a standard transaction template for blockchain to insert revocable public keys, with an optional burn amount.

=== Copyright ===

This BIP is licensed under the 2-clause BSD license.

=== Motivation ===
Decentralised systems have been struggling with the ongoing problem of enrolment of public key: the process of accepting new keys into a system. The core difficulty of public key enrolment is that new public keys may be used maliciously and attack the network (before they are banned or otherwise ejected). If the enrolment process isn't costly, a huge number of malicious public keys may be cheaply enrolled and used attack the network.

Various approaches have been attempted to make the enrolment process costly, however they have all proven to be either ineffective, centralising, or both.

In this proposal we cover the core required utilities of public key enrolment in a decentralised system:

==== Unambiguous Public Key: ====
* Decentralised systems need an unambiguous way to refer to a public key.

==== Cost: ====
* Decentralised systems need to be able to autonomously calculate the value burnt in the process of enrolling a public key.

==== Revocation: ====
* Decentralised systems need a standard way for private-key-holders to revoke an enrolled public key.

==== Small Size: ====
* Decentralised systems need to protect against denial of service, so the total-size of an public key enrolment transaction is limited.

=== Examples ===
TBD

== Specification ==

All hashes used in this specification defined by the bitcoin’s [https://en.bitcoin.it/wiki/Script OP_HASH256] op-code.

We first describe the public key enrolment transaction template.

=== Overview ===
An public key enrolment transaction is new transaction template of the following general form:
{| class="wikitable"
!Inputs
!Output Script
!Output Value
|-
| rowspan="3" |(single) (ignored) Funding Input
|OP_RETURN '''PAYLOAD'''
|'''BURN_VALUE'''
|-
|OP_HASH256 '''REVOKE_PUZZLE'''<ref>'''Why have a special revocation puzzle, instead of spending a normal output?'''  The primary reason is that it is the correct way of approaching the problem of revocation. There is no need for a cryptographic signature as it is a single-time operation. Additionally, we want the revocation checking code to be very simple; using OP_HASH256 means we only depends on SHA256.
</ref> OP_EQUAL
|ZERO<ref>'''Why must the revocation output have zero value?'''  The revocation output should not be used to store value as it can be claimed by a miner upon revocation. Additionally, we have no way of predicting the fee-requirements for the future. So allowing a non-zero value will encourage such speculation.
</ref>
|-
|(optional) Change Output
|(ignored)
|}

=== Template Rules ===
The following rules SHOULD be enforced in the is_standard rules and end-user applications:

===== Structure: =====
* The transaction total serialized size MUST be equal or less than 270-bytes.

* The transaction MUST contain only one input.
* The transaction MAY contain a third output.

===== First Output: =====
* Script MUST of the format: ''op_return '''payload'''''
** The ''payload'' MUST be less than 104-bytes in length.
** The first 64-bytes of the of the payload MUST be a valid compact signature (as defined in [https://github.com/bitcoin-core/secp256k1/blob/master/include/secp256k1.h secp256k1.h]) in of the '''signing data'''.
* Output value MAY have a zero output value.

===== Second Output: =====
* Output script MUST be of the format: ''op_hash256 '''revoke_puzzle''' op_equal''.
** The ''revoke puzzle'' MUST be exactly 32-bytes long.
* Output value MUST be zero.

===== Signing Data: =====
* The signing data MUST be the double sha256 hash of the following 39-bytes of data:
{| class="wikitable"
!Byte
!Bytes
!Payload
|-
|0-6
|7
|UTF-8 encoded: '''"BIPXXXX"''' (0x424950XXXXXXXX) (updated upon assignment of a BIP number)
|-
|7-38
|32
|'''REVOKE_PUZZLE'''
|}

=== Template Notes ===

==== Payload ====
The payload consists of two parts.
# (constant 64-bytes) Secp256k1 '''compact signature'''
# (optional 0 to 40-bytes) Application Use Payload

==== Signature ====
The signature provides two important roles:
# Defining the '''Public Key''' (via [https://github.com/bitcoin-core/secp256k1/blob/master/include/secp256k1_recovery.h public key recovery]).
# Proof that the owner of the public key accepts the associated revocation puzzle.

==== Burn Value ====
* The output value of the first script is the '''value burned'''.

==== Revoke Puzzle ====
* The pre-image of the revocation puzzle is the '''revocation code'''.

=== Application Verification ===
* A public key MAY have many concurrent enrolments.
* A public key enrolment SHOULD be referenced by the enrolment transaction, not the public key itself.
* User applications MUST verify the template rules.
* Applications MUST NOT accept enrolment transactions with less than 6 confirmations.
* Applications SHOULD display a warning when accepting enrolment transactions with 6 to 99 confirmations.

=== Revocation ===
* Upon reviving a valid revocation code applications MUST change the status of the associated enrolment transaction to '''revoked'''.
* Applications SHOULD gossip revocation codes, so that the revoke status spreads quickly throughout the system.
It is recommended that the revoke output is quickly spent for historical and accounting purposes.

=== Revocation Code Generation ===
* The revocation code MUST be generated from the same private key as defined by the signature.
* The revocation code MUST be the OP_HASH256 hash of the private key compact form.

=== Compatibly ===
This proposed transaction template will be considered non-standard.

We recommend if this specification is adopted that the transaction template defined here is considered a standard transaction form.

== Rationale ==

<references />

== Reference implementations ==

== Appendices ==

=== Revocation Code Design ===
The revocation code has been chosen as the most-simple design to enable secure revocations.  Revocations are single-use so they should not require a cryptographic signature, making them cheaper and easier to verify. The use of OP_HASH256 allows us to have a full 128-bit of entropy that is useful.
